和訳者 内川貴雄

Ruby on Railsをアップデートする際のガイド

このガイドはあなたがRuby on Railsの新しいバージョンが出た時にアップグレードするときの方法が記述されています。これらの方法は個別のリリースガイドにも適用可能です。

You need to balance out several factors: the need for new features, the increasing difficulty of finding support for old code, and your available time and skills, to name a few.
!1 一般的なアドバイス (General Advice)
存在しているアプリケーションをアップグレードしようと試みる前に、あなたはよいアップグレードができると信じてください。あなたはいくつかの要因を釣り合わせる必要があります:必要な新しいこと、【パス】


!!1.1 テスト範囲
アップグレード後にアプリケーションがまだ動作していることを確認するために最善の方法は、あなたがプロセスを開始する前に良いテストカバレッジを持つことです。
あなたのアプリケーションの大部分を行使する自動化されたテストを持っていない場合は、変更されたすべての部品を行使手動で時間を費やす必要があります。 
Railsのアップグレードの場合には、それがアプリケーションの機能の一つ一つの部分を意味します。自分に好意を行うと、あなたは、アップグレードを開始する前に、テスト·カバレッジが良好であることを確認してください。

プロセスを始める前に【】


1.2 Ruby Versions
!1.2 Rubyのバージョン

Railsは最新のRubyバージョンがリリースされるとその差を縮めようとします:

*Rails3とRuby1.8.7以上。Rubyの前バージョンのすべてのサポートは公式に終わってしまう
*Rails 3.2.xはRuby 1.8.7をサポートする最後のブランチである
*Rails 4はRuby 2.0と1.9.3より新しいものを好む

""Ruby 1.8.7 p248とp249はRailsをクラッシュさせるバグを持っています.Ruby Enterprise Editionは1.8.7(2010.02のリリースからデバッグに取り組んでいます。1.9の前、Ruby 1.9.1は明らかのセグメンテーションフォルトのため使うことができず、もしあなたが1.9.xを使いたければ、スムーズな航海のために1.9.3をまっすぐにとぶことになりました。

!2 Upgrading from Rails 3.2 to Rails 4.0
""この章はまだ記述途中です（公式文章）

もしあなたの現状のあプリケーションがRails3.2.xより古いものであるなら、Rails 4.0へ移行する前にRails3.2へアップグレードすべきです。

以下にアプリケーションをRails 4.0へアップグレードする手順を示します。

!!2.1 Gemfile

Rails 4.0はGemfileからassets groupを削除しました。アップグレードの際には、Gemfileの行を削除する必要があります。

2.2 vendor/plugins
Rails 4.0はもはやvendor/pluginsからのプラグインロードをサポートしなくなりました。
あなたはいくつかの取り除くべきプラグインから、Gemfileに追加したgemへと取り替えなければなりません。
If you choose not to make them gems, you can move them into, say, lib/my_plugin/* and add an appropriate initializer in config/initializers/my_plugin.rb.


2.3 Active Record
*Rails 4.0はActive Recordからidentity mapを削除しました。[[結合に矛盾があった|https://github.com/rails/rails/commit/302c912bf6bcd0fa200d964ec2dc4a44abe328a6]]ためです。もし手動でそれを許可していた場合、他に影響を及ぼさないためにいかのように設定すべきです：
cnfig.active_record.identity_map

*The delete method in collection associations can now receive Fixnum or String arguments as record ids, besides records, pretty much like the destroy method does. Previously it raised ActiveRecord::AssociationTypeMismatch for such arguments. From Rails 4.0 on delete automatically tries to find the records matching the given ids before deleting them.

*Rails 4.0はActiveRecord内にスタックを蓄積する方法を変更しました。前のバージョンのRailsにおいて、新しいorderは前バージョンで書かれたorderの後に適用されます。さらに情報がほしい場合は[[Active RecordのQuery guide|http://edgeguides.rubyonrails.org/active_record_querying.html#ordering]]を参照してください。

*Rails 4.0はserialized_attribetesとattr_readonlyをクラスメソッドへ変更しました。あなたはインスタンスメソッドを使うべきではありません。これれはクラスメソッドとして使いましょう。例えば、e.g.self.serialized_attributes を self.class.serialized_attributesというようにです。

*Rails 4.0はattr_accesible と attr_protected機能を削除しました。あなたはスムーズなアップグレードによって[[Protected Attributes gem|https://github.com/rails/protected_attributes]]を使うことができます。

*Rails 4.0はProc or lambdaを例とするように、スコープが呼び出せるオブジェクトを使用する必要があります:

<<<
scope :active, where(active: true)
 
# becomes
scope :active, -> { where active: true }
>>>
*Rails 4.0はActiveRecord::Fixturesを非推奨とし、ActiveRecord::FixtureSetを推奨します
*Rails 4.0はActiveRecord::TestCaseを非推奨とし、ActiveSupport::TestCaseを推奨します

!!2.4 Active Resource

Rails 4.0はgemからActive Resource機能を引き出しました。もしこの機能を未だに必要としているのならば、GemfileにActive Resourceを追加しましょう。

!!2.5 Active Model
*Rails 4.0はActiveModel::Validations::ConfirmationValidatorのエラー貼付方法を変更しました。今では、バリデーションのミスを確認する場合、#{attribute}_confirmation が attribeteの代わりに添付されます。

*Rails 4.0はActiveModel::Serializers::JSON.include_root_in_jsonの初期値をfalseに変更しました。今では、Active Model Serializers と Active Record オクジェクトは同じような初期値の振る舞いをします。これはconfig/initializers/wrap_parameters.rbのオプションを見解を述べるか削除することができることを意味します：
<<<
# Disable root element in JSON by default.
# ActiveSupport.on_load(:active_record) do
#   self.include_root_in_json = false
# end
>>>

!!2.6 Action Pack
*Rails 4.0はActiveSupport::KeyGeneratorを始め、適切なcookiesを生み出す基礎となるものを使います。
もし、新しいsecret_key_baseを加え、現存するsecret_tokenを取り除くのなら、Rails 3.x の現存するcookieのサインはそのままアップグレードされます。

<<<
# config/initializers/secret_token.rb
Myapp::Application.config.secret_token = 'existing secret token'
Myapp::Application.config.secret_key_base = 'new secret key base'
>>>

Rails 4.x上のユーザベースの100%を所有し、かつRails 3.xへロールバックする必要がないと革新するまでは、secret_key_baseを設定するのは待つべきであることに注意してください。
その理由は、Rails 4.xにおける新しいsecret_key_base上のcookieサインはRails 3.xとの下位互換性がないからです。
You are free to leave your existing secret_token in place, not set the new secret_key_base, and ignore the deprecation warnings until you are reasonably sure that your upgrade is otherwise complete.

もしあなたが外部アプリケーションや署名付きセッションcookieのRailsアプリケーションを読み込むためのJavascriptに頼っているのなら、これらの心配事から切り離されるまではsecret_key_baseを設定するべきではありません。

*もしsecret_key_baseが設定されているのなら、Rails 4.0はcookieに基づいたセッションのコンテンツを暗号化します。Rails 3.xはcookieに基づいたセッションのコンテンツを信号化はしますが暗号化はしません。
署名付きcookieはあなたのアプリによって生み出された確信のある"セキュア"なもので、ありtamper-proofです。
しかしながら、コンテンツはエンドユーザによって読まれ、大幅なパフォーマンスのペナルティなしに 暗号化したコンテンツは caveat/concern を排除します。
上述したように、もしあなたが新しいsecret_key_baseを加えるか、所定の位置に現存するsecret_tokenを削除した場合、現存する署名付きcookieはRails 3.xにおいてありのままアップグレードされます。

<<<
# config/initializers/secret_token.rb
Myapp::Application.config.secret_token = 'existing secret token'
Myapp::Application.config.secret_key_base = 'new secret key base'
>>>

同様に注意はここで適用されます。
Rails 4.x上のユーザベースの100%を所有し、かつRails 3.xへロールバックする必要がないと革新するまでは、secret_key_baseを設定するのは待つべきであることに注意してください。

また、あなたはアップグレードする前に、外部アプリケーションやJavaScriptでアプリによって生成された署名したクッキーをデコードする能力に頼っていないことを確認するのを気をつけるべきです。

セッションcookieの暗号化を行うために、[[Pull Request #9978|https://github.com/rails/rails/pull/9978]] の詳細をお読みください。

*Rails 4.0はActionController::Base.asset_path optionを削除しました。assets pipeline機能を使用してください。

*Rails 4.0はActionController::Base.page_cache_extensionのオプションを非推奨としました。ActionController::Base.default_static_extensionを代わりに使用してください。

*Rails 4.0はAction PachのPage cachingとActionを削除しました。
caches_actionを使用するため、及びあなたのcontrollerにおいてcaches_pagesを使用するためにactionpach-action_caching gemを追加する必要があります。

*Rails 4.0はXMLのパラメータを分析する機能を削除しました。もしこの機能を必要とするのなら、actionpach-xml_parser gemを追加する必要があります。

To upgrade, simply add gem 'dalli' to your Gemfile.
*Rails 4.0はデフォルトのmemcachedクライアントをmemcache-clientからdalliに変更しました
	
*Rails 4.0はdom_idとdom_classメソッドを非推奨としています。この機能を必要とする場合はActionView::RecordIdentifierをインクルードする必要があります。

*Rails 4.0はassert_generates、assert_recognizes、及びassert_routingの動作を変更しました。
現在、これらのアサーションは、ActionController::RoutingErrorの代わりになっています。

*もしルートの名前が衝突していることがはっきりしているならば、Rails 4.0はArgumentErrorを引き起こします。
これはリソースメソッドか名付けられたルートが原因になります。
以下にルートの名前が衝突している例を2つ取り上げます：

<<<
get 'one' => 'test#example', as: :example
get 'two' => 'test#example', as: :example
>>>
<<<
resources :examples
get 'clashing/:id' => 'test#example', as: :example
>>>
1つ目の場合では、多数のルートを同じ名前にすることによって簡単に回避出来ます。
2つ目の場合では、you can use the only or except options provided by the resources method to restrict the routes created as detailed in [[the Routing Guide|http://edgeguides.rubyonrails.org/routing.html#restricting-the-routes-created]].

*Rails 4.0 はunicodeでルートを書く方法を変更しました。
現在では直接unicodeでルートを書くことが可能です。
もし、すでにルートを書いていた場合、変更する必要があります。
以下にその例を示します：
<<<
get Rack::Utils.escape('こんにちは'), controller: 'welcome', action: 'index'
>>>

これを以下に変えてください：

<<<
get 'こんにちは', controller: 'welcome', action: 'index'
>>>
*Rails 4.0 requires that routes using match must specify the request method. For example:
<<<
# Rails 3.x
match "/" => "root#index"
 
# becomes
match "/" => "root#index", via: :get
 
# or
get "/" => "root#index"
>>>
*Rails 4.0はActionDispatch::BestStandardsSupportミドルウェアを削除し、[[http://msdn.microsoft.com/en-us/library/jj676915(v=vs.85).aspx|http://msdn.microsoft.com/en-us/library/jj676915(v=vs.85).aspx]]毎にスタンダードモードを引き起こし、またChromeFrameヘッダはconfig.action_dispatch.default_headersに移動されます。
あなたはアプリケションのコードから、いくつかのミドルウェアのリファレンスを削除しなければならないことを覚えておいてください。以下に例を示します：

<<<
# Raise exception
config.middleware.insert_before(Rack::Lock, ActionDispatch::BestStandardsSupport)
>>>

また、config.action_dispatch.best_standards_supportの設定環境を確認し、もし存在するなら削除してください。

*In Rails 4.0, precompiling assets no longer automatically copies non-JS/CSS assets from vendor/assets and lib/assets.
Rails application and engine developers should put these assets in app/assets or configure config.assets.precompile.

*Rails 4.0では、リクエストフォーマットが操作できないとき、ActionControllerc::UnknownFormatが掲げられます。初期設定では、406 Not acceptableを引き起こして例外は処理されますが、あなたはこれをオーバーライドすることもできます。Rails 3では、406 Not Acceptableが常時帰ってきます。これはオーバーライドできません。

*Rails 4.0では、一般的なActionDispatch::ParamsParser::ParseError例外は、リクエストしたパラメータを分析することによってParamsParserが失敗した時に発生します。例えば：あなたはlow-level MultiJson::DecodeErrorの代わりにこの例外を治したいと思うでしょう。

*Rails 4.0では、URLプレフィックスから付けられたアプリ上に検索エンジンがマウントされた時、SCRIPT_NAMEは完全に入れ子になります。あなたはURLプレフィックスの上書き周りの作業をするために、もはやdefault_url_options[:script_name]の設定をm吸うRuby on Rails必要はありません。

*Rails 4.0 ではActionControllor::Integrationは非推奨で、ActionDispatch::Integrationを推奨しています。

*Rails 4.0 ではActionControllor::IntegrationTestは非推奨で、ActionDispatch::IntegrationTestを推奨しています。

*Rails 4.0 ではActionControllor::PerformanceTestは非推奨で、ActionDispatch::PerformanceTestを推奨しています。

*Rails 4.0 ではActionControllor::AbstractRequestは非推奨で、ActionDispatch::Requestを推奨しています。

*Rails 4.0 ではActionControllor::Requestは非推奨で、ActionDispatch::Requestを推奨しています。

*Rails 4.0 deprecated ActionController::AbstractResponse in favor of ActionDispatch::Response.
*Rails 4.0 ではActionControllor::Requestは非推奨で、ActionDispatch::Responseを推奨しています。

*Rails 4.0 deprecated ActionController::Response in favor of ActionDispatch::Response.

*Rails 4.0 deprecated ActionController::Routing in favor of ActionDispatch::Routing.

!!2.7 Active Support
Rails 4.0はjが未だにActionView::Helpers::JavaScriptHelper#escape_javascriptで使われている頃から、ERB::Util#json_escapeのエイリアスであるjを削除しました。

!!2.8 Helpers Loading Order
1つのディレクトリ以上からのヘルパーに読み込まれた命令は、Rails 4.0にて変更しました。
前に、これらはアルファベット順にソートされ集められました。
After upgrading to Rails 4.0, helpers will preserve the order of loaded directories and will be sorted alphabetically only within each directory.
Unless you explicitly use the helpers_path parameter, this change will only impact the way of loading helpers from engines.
If you rely on the ordering, you should check if correct methods are available after upgrade.
If you would like to change the order in which engines are loaded, you can use config.railties_order= method.

!!2.9 Active Record Observer and Action Controller Sweeper
Active Record Observer と Action Controller Sweeper は rails-observers gem から取り除かれています。
これらの機能を必要とするならば、rails-observers gemを加える必要があります。

!!2.10 sprockets-rails
*assets:precompile:primary は削除されました。代わりに assets;precompile を使用してください。

!!2.11 sass-rails
*asset_url に2つの引数を渡すのは非推奨になりました。例: assert-url("rails.png", image) → asset_url("rails.png")

!3 Upgrading from Rails 3.1 to Rails 3.2
もし現行のアプリケーションが Rails 3.1.x より古い場合、Rails 3.2 へアップデートする前に、Rails 3.1 へアップグレードする必要があります。

以下の内容は Rails 3.2.x の最新バージョンである Rails 3.2.12 へアップグレードするためのものです。

!!3.1 Gemfile
以下のようにGemfileを変更してください。

<<<
gem 'rails', '= 3.2.12'
 
group :assets do
  gem 'sass-rails',   '~> 3.2.3'
  gem 'coffee-rails', '~> 3.2.1'
  gem 'uglifier',     '>= 1.0.3'
end
>>>

!!3.2 config/environments/development.rb
あなたの development environment に加えるべき新しい設定の組は以下になります。

<<<
# Raise exception on mass assignment protection for Active Record models
config.active_record.mass_assignment_sanitizer = :strict
 
# Log the query plan for queries taking more than this (works
# with SQLite, MySQL, and PostgreSQL)
config.active_record.auto_explain_threshold_in_seconds = 0.5
>>>

!!3.3 config/environments/test.rb
config/environments/test.rb も同様に、mass_assignment_sanitizer を設定してください。
<<<
# Raise exception on mass assignment protection for Active Record models
config.active_record.mass_assignment_sanitizer = :strict
>>>

!!3.4 vendor/plugins
Rails 3.2 で非推奨だった vendor/plugins は Rails 4.0 で完全に削除されます。
If you choose not to make them gems, you can move them into, say, lib/my_plugin/* and add an appropriate initializer in config/initializers/my_plugin.rb.
Rails 3.2 のアップグレードの間で厳密に必要というわけではなく、いくつかのプラグインは、gemを交換するか、Gemfileに記述を加えるかによって代用することができます。もしgemを作ることを選択しないのなら、移動させることを選択することができます。

!4 Upgrading from Rails 3.0 to Rails 3.1
もしあなたのアプリケーションが Rails 3.0.x よりも古いのなら、Rails 3.1 へのアップデートの前に Rails 3.0 へアップグレードすべきです。

以下は、Rails 3.1.xの最新バージョンである Rails 3.1.11 へアプリケーションをアップグレードするために行うことです。

!!4.1 Gemfile
以下のようにGemfileを変更してください。
<<<
gem 'rails', '= 3.1.11'
gem 'mysql2'
 
# Needed for the new asset pipeline
group :assets do
  gem 'sass-rails',   "~> 3.1.5"
  gem 'coffee-rails', "~> 3.1.1"
  gem 'uglifier',     ">= 1.0.3"
end
 
# jQuery is the default JavaScript library in Rails 3.1
gem 'jquery-rails'
>>>
!!4.2 config/application.rb
assert pipeline は以下の追加を必要とします:
<<<
config.assets.enabled = true
config.assets.version = '1.0'
>>>
もしあなたのアプリケーションが "/assets" のルートをリソースとして使っているのなら、衝突を回避するためにprefixを変える必要があります：

<<<
# Defaults to '/assets'
config.assets.prefix = '/asset-files'
>>>

!!4.3 config/environments/development.rb
RJSのconfig.action_view.debug_rjs = true の設定を削除してください。

もし asset pipeline を作動可能にしている場合は、以下の設定を追加してください：
<<<
# Do not compress assets
config.assets.compress = false
 
# Expands the lines which load the assets
config.assets.debug = true
>>>

!!4.4 config/environments/production.rb
また、下の変更点の殆どは、asset pipeline向けのものです。[[Asset Pipeline guide|http://edgeguides.rubyonrails.org/asset_pipeline.html]] にてさらに詳しい情報を読むことができます。
<<<
# Compress JavaScripts and CSS
config.assets.compress = true
 
# Don't fallback to assets pipeline if a precompiled asset is missed
config.assets.compile = false
 
# Generate digests for assets URLs
config.assets.digest = true
 
# Defaults to Rails.root.join("public/assets")
# config.assets.manifest = YOUR_PATH
 
# Precompile additional assets (application.js, application.css, and all non-JS/CSS are already added)
# config.assets.precompile += %w( search.js )
 
# Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
# config.force_ssl = true
>>>
!!4.5 config/environments/test.rb
あなたの test environment を追加することによって、テストの実行を助けることができます：
<<<
# Configure static asset server for tests with Cache-Control for performance
config.serve_static_assets = true
config.static_cache_control = "public, max-age=3600"
>>>

!!4.6 config/initializers/wrap_parameters.rb
もしあなたがネストされたハッシュにパラメータを隠したいのなら、次のコンテンツを含んだfileを追加してください。
これは新しいアプリケーションのデフォルト値です。
<<<
# Be sure to restart your server when you modify this file.
# This file contains settings for ActionController::ParamsWrapper which
# is enabled by default.
 
# Enable parameter wrapping for JSON. You can disable this by setting :format to an empty array.
ActiveSupport.on_load(:action_controller) do
  wrap_parameters format: [:json]
end
 
# Disable root element in JSON by default.
ActiveSupport.on_load(:active_record) do
  self.include_root_in_json = false
end
>>>
!!4.7 config/initializers/session_store.rb
あなたはセッションキーを新しいものへと替えるか、全てのセッションを削除する必要があります：
<<<
# in config/initializers/session_store.rb
AppName::Application.config.session_store :cookie_store, key: 'SOMETHINGNEW'
>>>
or
<<<
$ rake db:sessions:clear
>>>
!!4.8 Remove :cache and :concat options in asset helpers references in views
With the Asset Pipeline the :cache and :concat options aren't used anymore, delete these options from your views.
Asset Pipeline を使用するなら使われていない:cache と :concat オプションはあなたのviewから削除してください。

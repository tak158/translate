Contributing to Ruby on Rails
このガイドにはRuby on Rairsの発展に携わる方法についてが記述されています。

これを読むことによって、以下のことを知ることができます：

*議論をレポートする際のGitHubの使用方法
*マスターをクローンする方法と、パッケージテストの実行方法
*現存する議論を解決するために助ける方法
*Ruby on Railsドキュメントに投稿する方法
*Ruby on Rails code に投稿する方法

Ruby on Rails is not "someone else's framework."
Over the years, hundreds of people have contributed to Ruby on Rails ranging from a single character to massive architectural changes or significant documentation ― all with the goal of making Ruby on Rails better for everyone.
Even if you don't feel up to writing code or documentation yet, there are a variety of other ways that you can contribute, from reporting issues to testing patches.

!1 Reporting an Issue（問題の報告）
Ruby on Railsは問題の走査のために[[GitHub Issue Tracking|https://github.com/rails/rails/issues]]を使用します。(最優先なのはバグと新しいコード提出です)
もしRuby on Railsのバグを発見したら、それは始まりです。
問題の報告のためにGitHubのアカウント（無料）を作り、コメントかpull requestを作ってください。


""Bugs in the most recent released version of Ruby on Rails are likely to get the most attention. Also, the Rails core team is always interested in feedback from those who can take the time to test edge Rails (the code for the version of Rails that is currently under development). Later in this guide you'll find out how to get edge Rails for testing.


!!1.1 Creating a Bug Report
If you find no issue addressing it you can add a new one. (See the next section for reporting security issues.)
セキュリティリスクではないRuby on Railsの問題を見つけたら、GitHubの[[Issues|https://github.com/rails/rails/issues]]からそれがすでに報告されていないか検索してください。
もしなければ[[add new one|https://github.com/rails/rails/issues/new]]を追加することができます。

問題の提出の際には、最低でもタイトルと解説文が必要になります。
しかしこれだけです。
ですができるだけ多くの関連情報を含ませてください。
少なくとも問題をもっているサンプルコードは投稿する必要があります。
もっと言えば問題を引き起こさない振る舞いが期待できるunit testを含めるべきです。
あなたの目標はこれらのことを自分で簡単にできるようにすることであり、バグを複製し修正を見つけ出すことです。

Then, don't get your hopes up!
Unless you have a "Code Red, Mission Critical, the World is Coming to an End" kind of bug, you're creating this issue report in the hope that others with the same problem will be able to collaborate with you on solving it.
問題のレポートが機械的に見られたり、また誰かがバグフィックスに動いたりすることを期待してはいけません。
問題を生み出すと大抵解決するのは自分であり、他の人は「私もこの問題を抱えている」というコメントで支援することが殆どです。

!!1.2 Create a Self-Contained gist for Active Record Issues
Active Recordのバグレポートを埋める場合は、published gemでのバグ発見なら[[gems用のテンプレート|https://github.com/rails/rails/blob/master/guides/bug_report_templates/active_record_gem.rb]]を使い、master branchでのバグ発見なら[[master用のテンプレート|https://github.com/rails/rails/blob/master/guides/bug_report_templates/active_record_master.rb]]を使用してください。

!!1.3 Special Treatment for Security Issues

""Please do not report security vulnerabilities with public GitHub issue reports. The Rails security policy page details the procedure to follow for security issues.


!!1.4 What about Feature Requests?（機能リクエストはどう？）
Please don't put "feature request" items into GitHub Issues.
If there's a new feature that you want to see added to Ruby on Rails, you'll need to write the code yourself - or convince someone else to partner with you to write the code.
Later in this guide you'll find detailed instructions for proposing a patch to Ruby on Rails.
If you enter a wishlist item in GitHub Issues with no code, you can expect it to be marked "invalid" as soon as it's reviewed.

If you'd like feedback on an idea for a feature before doing the work for make a patch, please send an email to the rails-core mailing list. You might get no response, which means that everyone is indifferent. You might find someone who's also interested in building that feature. You might get a "This won't be accepted." But it's the proper place to discuss new ideas. GitHub Issues are not a particularly good venue for the sometimes long and involved discussions new features require.

!2 Setting Up a Development Environment
In this section of the guide you'll learn how to set up the tests on your own computer.
バグを提出することによって現状の問題を解決したり、Ruby on Railsにあなた独自のコードを提出してから移るには、テストのソフトウェア・パッケージを実行する必要があります。


!!2.1 The Easy Way
開発環境を準備する際の最も簡単で推奨される方法は、Rails development boxを使用することです。

!!2.2 The Hard Way
あなたがRails development boxを使用しない場合、他のガイドを確認してください。

!3 Running an Application Against Your Local Branch（あなたのローカルブランチにてアプリケーションを実効する）
--devをつけたrails	 newコマンドはあなたのローカルブランチを使ったアプリケーションを生成します:
<<<
$ cd rails
$ bundle exec rails new ~/my-test-app --dev
>>>

~/my-test-app内に生み出されたアプリケーションは、あなたのローカルブランチと大して実行され、特にサーバーの最起動時にすべての変更を確認しています。

!4 Testing Active Record（Active Record のテスト）
ここではどうすればActive Recordのテストパッケージを起動できるかについて語ります。対象はSQLite3です：
<<<
$ cd activerecord
$ bundle exec rake test_sqlite3
>>>

あなたはSQLite3向けにテストを実行出来ます。そのタスクは各々：
<<<
test_mysql
test_mysql2
test_postgresql
>>>
最後に、
<<<
$ bundle exec rake test
>>>

上記のコマンドは順に4つ実行されます。

またいくつかの命令によって別々にテストを実行出来ます：
<<<
$ ARCONN=sqlite3 ruby -Itest test/cases/associations/has_many_associations_test.rb
>>>
あなたはtest_jdbcmysql、test_jdbcsqlite3、test_jdbcpostgresqlを生み出すことができます。
See the file activerecord/RUNNING_UNIT_TESTS.rdoc for information on running more targeted database tests, or the file ci/travis.rb for the test suite run by the continuous integration server.

!$4.1 Warnings
警告を有効なものにしてテストのパッケージは実行されます。
理想としては、Ruby on Railsは警告を出さないことでしょう、しかし、おそらくはいくつかの警告、およびサードパーティ製のライブラリからの警告が出るでしょう。
これらは無視（または修正！）し、もしあれば、警告を出さないパッチを提出してください。

これを書いている時点（2010年12月）では、Ruby 1.9に特にうるさいです。
もしあなたが何をするかを明確にしている、またはどのようなアウトプットを行うかを明らかにしているのなら、flagをオーバーライドする方法はあります:
<<<
$ RUBYOPT=-W0 bundle exec rake test
>>>
!!4.2 Older Versions of Ruby on Rails
もしあなたが古いバージョンのRuby on Railsを修正したいのなら、自身のローカルにtracking branchにスイッチし、セットアップする必要があります。
以下は3-0-stable branchにスイッチするサンプルです：

<<<
$ git branch --track 3-0-stable origin/3-0-stable
$ git checkout 3-0-stable
>>>

""あなたが仕事をしてきたコードのバージョンと覚える目的で、シェルプロンプトを使用して簡単に実行し、Git branchの名前を置き換えたいでしょう【意味不明なので書き直し】

!5 Helping to Resolve Existing Issues
あなたの問題の報告の次のステップは、現状の問題を解決しようとしているコアチームを助けることです。
もしGitHubに挙げられている[[すべての問題|https://github.com/rails/rails/issues]]を確認したら、さらに注意が必要な問題を多く見つけることができます。
これらのことができますか？かなり行動的なことです：

!!5.1 Verifying Bug Reports

まず第一に、バグレポートの検証を助けて下さい。
レポートの問題をあなたのコンピュータを再現出来ますか？
もしそうなら、問題に対してあなたが見ているのと同じようなコメントを残すことができます。

If something is very vague, can you help squash it down into something specific?
Maybe you can provide additional information to help reproduce a bug, or help by eliminating needless steps that aren't required to demonstrate the problem.

もしあなたがテストなしにバグレポートを発見できるのなら、falseを返すテストに貢献する時にとても便利なものになります。
これは、ソースコードの探検を始めようとする方法も素晴らしいものとなります。（現存するテストファイルを見ることはあなたにどうすればさらなるテストを書けるか教えることになるため）
新しいテストは、パッチの形として最も優れた貢献となり、"Contributing to the Rails Code"のセクションを説明するのと同じようなものです。

Anything you can do to make bug reports more succinct or easier to reproduce is a help to folks trying to write code to fix those bugs - whether you end up writing the code yourself or not.

!!5.2 Testing Patches
GitHubを通じてRuby on Railsを提出したプルリクエストを調べることによってもまた助けることができます。
誰かの変更を適用するには、まず始めに専用のbranchを作成する必要があります：

<<<
$ git checkout -b testing_branch
>>>
For example, let's say the GitHub user JohnSmith has forked and pushed to a topic branch "orange" located at https://github.com/JohnSmith/rails.
そしてあなたのcodebaseをアップデートするために、リモートbranchを使う事ができます。
例えば、GitHubユーザのJohnSmithをforkし、[[https://github.com/JohnSmith/rails|https://github.com/JohnSmith/rails]]へ"orange"という名前のtopic branchでpushします。
<<<
$ git remote add JohnSmith git://github.com/JohnSmith/rails.git
$ git pull JohnSmith orange
>>>
これらのbranchの適用後、テストを行いましょう！以下に考慮すべきことを挙げます：

*変更は本当に働いていますか？
*テストによって何かいいことはありますか？彼らのテストをフォローできていますか？テストにミスはありませんか？
*適切なドキュメントを把握していますか？ドキュメントは他の場所で更新する必要がありますか？
*実行は好きですか？変更の実施のためによりよくて早い方法を考えられていますか？

一度でもpull requestが良い変更を含んで幸せになったら、あなたの賛同をGitHubのissueにコメントしましょう。
あなたのコメントは、あなたが変更することが好き、そして何が好きかを示すべきでしょう。

""I like the way you've restructured that code in generate_finder_sql ― much nicer. The tests look good too.
If your comment simply says "+1", then odds are that other reviewers aren't going to take it too seriously. Show that you took the time to review the pull request.

!6 Contributing to the Rails Documentation
Ruby on Railsは2つのメインドキュメントを持っています：the guides help you in learning about Ruby on Rails と API reference です。

あなたはRails guidesの発展を、一貫した文書であったり、矛盾しておらずた読めるものであったり、失敗の情報を加えたものであったり、エラーの修正法であったり、誤植の修正であったり、最新のRails endgeを発展させたりすることによって助けることができます。

Rails guidesの翻訳に参加するには、[[Trasslating Rails Guides|https://github.com/lifo/docrails/wiki/translating-rails-guides]]を参照してください。

もしあなたの変更について確信が持てているなら、[[docrails|https://github.com/lifo/docrails]]を通じて貴方自身で直接pushすることができます。
Docrailsはオープンコミットポリシーを持ち、誰でも記述するアクセス権を持っているブランチです。
Docrailsにコミットは今でも再調査されておりますが、しかしpushした後に再調査が起こるかもしれません。
Docrailsは定期的にmasterにmergeされているため、あなたは効果的にRuby on Rails documentationを編集できます。

もしドキュメントの変更に確信が持てないのなら、GitHub上の[[Rails|https://github.com/rails/rails/issues]]問題提起場に問題を作ることができます。

documentationに関して仕事するとき、[[API Documentation Guidelines|http://edgeguides.rubyonrails.org/api_documentation_guidelines.html]]と[[Ruby on Rails Guides Guidelines|http://edgeguides.rubyonrails.org/ruby_on_rails_guides_guidelines.html]]を参考にしてください。

""手早く説明すると、通常のコードのパッチは適切なdocumentationに適用されます。Docrailsは孤立したdocumentationの進歩のためだけに使用されます。


""私たちのCIサーバを助けるために、あなたは[ci skip]をあなたなdocumentationコミットメッセージにコミットの際にビルドをスキップする目的で加えることができます。documentationの変更にコミットが包括するためだけにそれを使うことを覚えておくようにお願いします。

""Docrailsは厳格なポリシーを持っています：コードの無いものはノータッチ、取るに足らない小さな変更は問わない。RDocとguidesはdocrailsを通してのみ編集ができます。また、CHANGELOGsはdocrailsないでは変更されません。

!7 Contributing to the Rails Code
!!7.1 Clone the Rails Repository
はじめにあなたが与えるべきコードは、リポジトリをクローンすることです：

<<<
$ git clone git://github.com/rails/rails.git
>>>
次に専用のbranchを作って下さい：
<<<
$ cd rails
$ git checkout -b my_new_branch
>>>
あなたがどんな名前をつけようと特に問題はありません。なぜならそのbranchはあなたのローカルコンピュータとGitHub上の個人のリポジトリでしかずっと存在しないからです。RailsのGitリポジトリの一部になることはありません。

!!7.2 Write Your Code
コードの編集と追加に忙しくなりましょう。
あなたがあなたのbranch上を使っている時、あなたが行いたいすべてのことが書き込めます。（git branch -aであなたが正しいbranchにいるか確認することができます）
しかしもしあなたがRailsで提出することを計画しているのなら、次のいくつかのことを気に留めておいて下さい：

*正しいコードを入手しましょう
*Railsのヘルパーとイディオムを使いましょう
*失敗するテストをコードに含みましょう。そしてそれをパスしましょう
*Update the (surrounding) documentation, examples elsewhere, and the guides: whatever is affected by your contribution.

push変更する前にテストコンポーネントをすべてRails内で実行することは習慣的ではない。特にrailtiesのテストは長い時間を要し、もしrails-dev-boxでの推奨されたワークフローで浮浪者にソースコードを書かれてしまうとそれ以上になってしまいます。

As a compromise, test what your code obviously affects, and if the change is not in railties run the whole test suite of the affected component.
もしすべてがグリーンなら、あなたの貢献は十分に提案出来ます。
どこかで予期しない破損をキャッチするために私たちは[[Travis CI|http://edgeguides.rubyonrails.org/https%0A://travis-ci.org/]]を持っています。

""Changes that are cosmetic in nature and do not add anything substantial to the stability, functionality, or testability of Rails will generally not be accepted.

!!7.3 Follow the Coding Conventions
Railsはコーディングスタイルの簡単な規約をフォローしています：


*インデントはタブを使わず2スペース開けてください
*後続の空白は不要です。何もない行はスペースを持たせないでください
*private/protectedの後にはインデントを入れて下さい
*hashにはRuby 1.9以上のものを使用して下さい。{:a => :b}ではなく{ a: :b }を使用して下さい
*and/or より &&/|| を使用して下さい
*クラスメソッドには、self.methodより class << self を使用して下さい
*my_method( my_arg )またはmy_method my_argではなく MyClass.my_method(my_arg)を使用して下さい
*a=b ではなく a = b を使用して下さい
*refuteの代わりに assert_not メソッドを使用して下さい
*single-line blockのためには method{do_stuff} ではなく method { do_stuff } を使用して下さい
*あなたが以前見たことがあるソースに従ってください

上記がガイドラインです。
これらに習って良い判断を行なって下さい。

!!7.4 Updating the CHANGELOG
CHANGELOGは毎回のリリースの重要な部分になっています。
どのRailsのバージョンに対してもチェンジリストはキープされます。

あなたが追加または機能を削除している、またはバグ修正をコミットしている、または廃止の通知をしている場合は、変更したフレームワークののCHANGELOGにエントリを追加する必要があります。
リファクタリングとドキュメントの変更に関しては、一般的にCHANGELOGに行くべきではありません。

CHANGELOGを変更、出来れば終了した場合は著者の名前で締める必要があります。
より多くのスペースを必要とする場合、より多くの行を使うことができ、コードの例を付属させたいなら、4つのスペースでインデントしてください。
変更が特定の問題に関連している場合は、問題番号を添付すべきです。
以下にCHANGELOGエントリの例を示します：

<<<
*   Summary of a change that briefly describes what was changed. You can use multiple
    lines and wrap them at around 80 characters. Code examples are ok, too, if needed:
 
        class Foo
          def bar
            puts 'baz'
          end
        end
 
    You can continue after the code example and you can attach issue number. GH#1234
 
    *Your Name*
>>>    
あなたがコード例を提供していない、または複数の段落を用いなかった場合、あなたの名前は最後の単語の間に直接追加することができます。
そうでなければ、新しい段落に作るのが一番いいです。

!!7.5 Sanity Check
あなたはコードを提出剃る前に、それを見ているのが1人という状況を作ってはいけません。
あなたは少なくとも1人の正確なRails開発者を知っていますか？
あなたが行なっていることに対してフィードバックを得て下さい。
 Doing this in private before you push a patch out publicly is the “smoke test” for a patch:
公にパッチを公開する前に、プライベートに行なってしまうと、それはパッチのための"スモークテスト"になります：
もし美しいコードであることを他の1人の開発者に説得できない場合、コアチームに関してもまた説得することは起こりそうもありません。

!!7.6 Commit Your Changes
あなたのコンピュータに書いたコードがとてもよいものである場合は、Gitにコミットする必要があります：
<<<
$ git commit -a
>>>
この時点で、あなたのエディタは起動され、コミットメッセージを書くことが可能です。
変更が行われた理由、及びうまくフォーマットされたコミットメッセージを書くための時間をとって下さい。その理由は、他人のために有用であるからです。

良いコミットメッセージは以下のフォーマットに従っています：

<<<
Short summary (ideally 50 characters or less)
 
More detailed description, if necessary. It should be wrapped to 72
characters. Try to be as descriptive as you can, even if you think that
the commit content is obvious, it may not be obvious to others. You
should add such description also if it's already present in bug tracker,
it should not be necessary to visit a webpage to check the history.
 
Description can have multiple paragraphs and you can use code examples
inside, just indent it with 4 spaces:
 
    class PostsController
      def index
        respond_with Post.limit(10)
      end
    end
 
You can also add bullet points:
 
- you can use dashes or asterisks
 
- also, try to indent next line of a point for readability, if it's too
  long to fit in 72 characters
>>>
""適切な場合は単一のコミットを行なって下さい。これはチェリーピックを簡素化し、gitのログが綺麗に保つためです。

!!7.7 Update Your Branch

あなたが働いている間にmasterへの変更がある可能性はあります。
その整合性をとって下さい：
<<<
$ git checkout master
$ git pull --rebase
>>>
それでは最新の変更の上にあなたのパッチを適用してみます：
<<<
$ git checkout my_new_branch
$ git rebase master
>>>
競合は起きていませんか？またテストを渡しますか？変更はあなたにとって合理的ですか？それでは次の項目です。

!!7.8 Fork
Railsの[[GitHub repository|https://github.com/rails/rails]]に移動して、右上隅の"Fork"を押して下さい。

あなたのローカルマシンのリポジトリにリモートリポジトリを追加します：
<<<
$ git remote add mine git@github.com:<your user name>/rails.git
>>>
リモートリポジトリを追加してください：
<<<
$ git push mine my_new_branch
>>>
You might have cloned your forked repository into your machine and might want to add the original Rails repository as a remote instead, if that's the case here's what you have to do.

クローンしたディレクトリにて：
<<<
$ git remote add rails git://github.com/rails/rails.git
>>>
公式のリポジトリからbranchと新しいコミットをダウンロード：
<<<
$ git fetch rails
>>>
新しいコンテンツをmerge:
<<<
$ git checkout master
$ git rebase rails/master
>>>
あなたのforkをアップデート：
<<<
$ git push origin master
>>>
もし他のbranchをアップデートしたいなら：
<<<
$ git checkout branch_name
$ git rebase rails/branch_name
$ git push origin branch_name
>>>
!!7.9 Issue a Pull Request
Navigate to the Rails repository you just pushed to (e.g. https://github.com/your-user-name/rails) and press "Pull Request" in the upper right hand corner.

Write your branch name in the branch field (this is filled with "master" by default) and press "Update Commit Range".

Ensure the changesets you introduced are included in the "Commits" tab. Ensure that the "Files Changed" incorporate all of your changes.

Fill in some details about your potential patch including a meaningful title. When finished, press "Send pull request". The Rails core team will be notified about your submission.

!!7.10 Get some Feedback
Now you need to get other people to look at your patch, just as you've looked at other people's patches. You can use the rubyonrails-core mailing list or the #rails-contrib channel on IRC freenode for this. You might also try just talking to Rails developers that you know.

!!7.11 Iterate as Necessary
It’s entirely possible that the feedback you get will suggest changes. Don’t get discouraged: the whole point of contributing to an active open source project is to tap into community knowledge. If people are encouraging you to tweak your code, then it’s worth making the tweaks and resubmitting. If the feedback is that your code doesn’t belong in the core, you might still think about releasing it as a gem.

!!!7.11.1 Squashing commits
One of the things that we may ask you to do is "squash your commits," which will combine all of your commits into a single commit. We prefer pull requests that are a single commit. This makes it easier to backport changes to stable branches, squashing makes it easier to revert bad commits, and the git history can be a bit easier to follow. Rails is a large project, and a bunch of extraneous commits can add a lot of noise.

In order to do this, you'll need to have a git remote that points at the main Rails repository. This is useful anyway, but just in case you don't have it set up, make sure that you do this first:
<<<
$ git remote add upstream https://github.com/rails/rails.git
>>>
You can call this remote whatever you'd like, but if you don't use upstream, then change the name to your own in the instructions below.

Given that your remote branch is called my_pull_request, then you can do the following:
<<<
$ git fetch upstream
$ git checkout my_pull_request
$ git rebase upstream/master
$ git rebase -i
 
< Choose 'squash' for all of your commits except the first one. >
< Edit the commit message to make sense, and describe all your changes. >
 
$ git push origin my_pull_request -f
>>>
You should be able to refresh the pull request on GitHub and see that it has been updated.

!!7.12 Backporting
Changes that are merged into master are intended for the next major release of Rails. Sometimes, it might be beneficial for your changes to propagate back to the maintenance releases for older stable branches. Generally, security fixes and bug fixes are good candidates for a backport, while new features and patches that introduce a change in behavior will not be accepted. When in doubt, it is best to consult a Rails team member before backporting your changes to avoid wasted effort.

For simple fixes, the easiest way to backport your changes is to extract a diff from your changes in master and apply them to the target branch.

First make sure your changes are the only difference between your current branch and master:
<<<
$ git log master..HEAD
>>>
Then extract the diff:
<<<
$ git format-patch master --stdout > ~/my_changes.patch
>>>
Switch over to the target branch and apply your changes:

<<<
$ git checkout -b my_backport_branch 3-2-stable
$ git apply ~/my_changes.patch
>>>
This works well for simple changes. However, if your changes are complicated or if the code in master has deviated significantly from your target branch, it might require more work on your part. The difficulty of a backport varies greatly from case to case, and sometimes it is simply not worth the effort.

Once you have resolved all conflicts and made sure all the tests are passing, push your changes and open a separate pull request for your backport. It is also worth noting that older branches might have a different set of build targets than master. When possible, it is best to first test your backport locally against the Ruby versions listed in .travis.yml before submitting your pull request.

And then... think about your next contribution!

!8 Rails Contributors
すべての貢献者はRails Contributorsのクレジットを得ます。

翻訳者：内川貴雄

Contributing to Ruby on Rails
このガイドにはRuby on Rairsの発展に携わる方法についてが記述されています。

これを読むことによって、以下のことを知ることができます：

*議論をレポートする際のGitHubの使用方法
*マスターをクローンする方法と、パッケージテストの実行方法
*現存する議論を解決するために助ける方法
*Ruby on Railsドキュメントに投稿する方法
*Ruby on Rails code に投稿する方法

Ruby on Rails は"someone else's framework"ではありません。
長年にわたって、何百人もの人々が、単一の文字から大規模なアーキテクチャの変更や大幅なドキュメントに至るまでRuby on Railsに貢献してきました。ー皆のためによりよいRuby on Railsを作ることを目標にして。
たとえ、あなたはまだ書かれたコードやdocumentationにそれを感じることがなかったとしても、貢献するための様々な方法があります。

!1 Reporting an Issue（問題の報告）
Ruby on Railsは問題の走査のために[[GitHub Issue Tracking|https://github.com/rails/rails/issues]]を使用します。(最優先なのはバグと新しいコード提出です)
もしRuby on Railsのバグを発見したら、それは始まりです。
問題の報告のためにGitHubのアカウント（無料）を作り、コメントかpull requestを作ってください。


""Ruby on Railsでの最新リリースバージョンのバグは、最も注目を集める可能性が高いです。また、Railsのコアチームは、常にedge版のRailsをテストするために時間を取ることが出来る人からのフィードバックに興味をもっています。このガイドでは、後にテストのためにedge版のRailsを取得する方法について見ていきます。


!!1.1 Creating a Bug Report

セキュリティリスクではないRuby on Railsの問題を見つけたら、GitHubの[[Issues|https://github.com/rails/rails/issues]]からそれがすでに報告されていないか検索してください。
もしなければ[[add new one|https://github.com/rails/rails/issues/new]]を追加することができます。

問題の提出の際には、最低でもタイトルと解説文が必要になります。
しかしこれだけです。
ですができるだけ多くの関連情報を含ませてください。
少なくとも問題をもっているサンプルコードは投稿する必要があります。
もっと言えば問題を引き起こさない振る舞いが期待できるunit testを含めるべきです。
あなたの目標はこれらのことを自分で簡単にできるようにすることであり、バグを複製し修正を見つけ出すことです。

その後、あなたの希望を得ることはありません！
あなたは、"Code Red"、またはミッションクリティカル、世界を終わらせるようなバグを持っていない限りは、同じ問題で他の人がそれを解決するためにあなたと協力することを期待して問題のレポートを作成しています。
問題のレポートが機械的に見られたり、また誰かがバグフィックスに動いたりすることを期待してはいけません。
問題を生み出すと大抵解決するのは自分であり、他の人は「私もこの問題を抱えている」というコメントで支援することが殆どです。

!!1.2 Create a Self-Contained gist for Active Record Issues
Active Recordのバグレポートを埋める場合は、published gemでのバグ発見なら[[gems用のテンプレート|https://github.com/rails/rails/blob/master/guides/bug_report_templates/active_record_gem.rb]]を使い、master branchでのバグ発見なら[[master用のテンプレート|https://github.com/rails/rails/blob/master/guides/bug_report_templates/active_record_master.rb]]を使用してください。

!!1.3 Special Treatment for Security Issues

""publicなGitHubの問題レポートでセキュリティの脆弱性を報告しないようお願いします。詳細は[[Rails security policy page|http://rubyonrails.org/security]]に従ってください。


!!1.4 What about Feature Requests?（機能リクエストはどう？）
GitHubの問題に、"feature request"の項目を入れてはいけません。
もしRuby on Railsの機能に加えて、欲しいと思える新機能があれば、コードを自分で記述する必要があります。
後でこのガイドでは、Ruby on Railsにパッチを提案するための詳細な手順を取り上げます。
もし、コード無しにGitHubの問題でリスト項目を入力した場合、あなたはそれをすぐ見直しているものとして"invalid"マークを付けられることが予測されます。

パッチを作るための作業を行う前に、昨日のアイデアにフィードバックをしたい場合は、[[rairs-core mailing list|https://groups.google.com/forum/?fromgroups#!forum/rubyonrails-core]]にメールを送信してください。もしかしたら誰もが無関心で応答がない場合もあるかもしれません。
また、その昨日の構築に興味をもっている人を見つけるかもしれません。
もしくは"このメールは受け付けられません"という応答になるかもしれません。
しかし、新しいアイデアを議論するには適切な場所なのです。

!2 Setting Up a Development Environment
既存の問題を解決する手助けやRuby on Railsに独自のコードによってバグを提出することから動くには、そのテストスイートを実行することができなければなりません。
このセクションでは、自分のコンピュータ上でのテストを設定する方法を学びます。


!!2.1 The Easy Way
開発環境を準備する際の最も簡単で推奨される方法は、Rails development boxを使用することです。

!!2.2 The Hard Way
あなたがRails development boxを使用しない場合、他のガイドを確認してください。

!3 Running an Application Against Your Local Branch（あなたのローカルブランチにてアプリケーションを実効する）
--devをつけたrails	 newコマンドはあなたのローカルブランチを使ったアプリケーションを生成します:
<<<
$ cd rails
$ bundle exec rails new ~/my-test-app --dev
>>>

~/my-test-app内に生み出されたアプリケーションは、あなたのローカルブランチと大して実行され、特にサーバーの最起動時にすべての変更を確認しています。

!4 Testing Active Record（Active Record のテスト）
ここではどうすればActive Recordのテストパッケージを起動できるかについて語ります。対象はSQLite3です：
<<<
$ cd activerecord
$ bundle exec rake test_sqlite3
>>>

あなたはSQLite3向けにテストを実行出来ます。そのタスクは各々：
<<<
test_mysql
test_mysql2
test_postgresql
>>>
最後に、
<<<
$ bundle exec rake test
>>>

上記のコマンドは順に4つ実行されます。

またいくつかの命令によって別々にテストを実行出来ます：
<<<
$ ARCONN=sqlite3 ruby -Itest test/cases/associations/has_many_associations_test.rb
>>>
あなたはtest_jdbcmysql、test_jdbcsqlite3、test_jdbcpostgresqlを生み出すことができます。
よりターゲットを絞ったデータベースのテストを実行する方法については、activerecord/RuNNING_UNIT_TESTS.rdocを参照してください。また、継続的インテグレーションサーバに関しての実行テストは ci/travis.rbを参照してください。

!$4.1 Warnings
警告を有効なものにしてテストのパッケージは実行されます。
理想としては、Ruby on Railsは警告を出さないことでしょう、しかし、おそらくはいくつかの警告、およびサードパーティ製のライブラリからの警告が出るでしょう。
これらは無視（または修正！）し、もしあれば、警告を出さないパッチを提出してください。

これを書いている時点（2010年12月）では、Ruby 1.9に特にうるさいです。
もしあなたが何をするかを明確にしている、またはどのようなアウトプットを行うかを明らかにしているのなら、flagをオーバーライドする方法はあります:
<<<
$ RUBYOPT=-W0 bundle exec rake test
>>>
!!4.2 Older Versions of Ruby on Rails
もしあなたが古いバージョンのRuby on Railsを修正したいのなら、自身のローカルにtracking branchにスイッチし、セットアップする必要があります。
以下は3-0-stable branchにスイッチするサンプルです：

<<<
$ git branch --track 3-0-stable origin/3-0-stable
$ git checkout 3-0-stable
>>>

""あなたが仕事をしてきたコードのバージョンと覚える目的で、シェルプロンプトを使用して簡単に実行し、Git branchの名前を置き換えたいでしょう【意味不明なので書き直し】

!5 Helping to Resolve Existing Issues
あなたの問題の報告の次のステップは、現状の問題を解決しようとしているコアチームを助けることです。
もしGitHubに挙げられている[[すべての問題|https://github.com/rails/rails/issues]]を確認したら、さらに注意が必要な問題を多く見つけることができます。
これらのことができますか？かなり行動的なことです：

!!5.1 Verifying Bug Reports

まず第一に、バグレポートの検証を助けて下さい。
レポートの問題をあなたのコンピュータを再現出来ますか？
もしそうなら、問題に対してあなたが見ているのと同じようなコメントを残すことができます。

何かが非常に曖昧である場合、あなたは特定の何かにスカッシュすることを助けることができますか？
おそらく、あなたはバグを再現することを手助けし、また問題を実証するために必要とされない手順を排除することによって、訳にたつ追加情報を提供することができます。

もしあなたがテストなしにバグレポートを発見できるのなら、falseを返すテストに貢献する時にとても便利なものになります。
これは、ソースコードの探検を始めようとする方法も素晴らしいものとなります。（現存するテストファイルを見ることはあなたにどうすればさらなるテストを書けるか教えることになるため）
新しいテストは、パッチの形として最も優れた貢献となり、"Contributing to the Rails Code"のセクションを説明するのと同じようなものです。

あなたがバグレポートをより完結または再現することが容易になるように何かすることは、これらのバグを修正するコードを記述しようとする人々の助けになります。

!!5.2 Testing Patches
GitHubを通じてRuby on Railsを提出したプルリクエストを調べることによってもまた助けることができます。
誰かの変更を適用するには、まず始めに専用のbranchを作成する必要があります：

<<<
$ git checkout -b testing_branch
>>>
そしてあなたのcodebaseをアップデートするために、リモートbranchを使う事ができます。
例えば、GitHubユーザのJohnSmithをforkし、[[https://github.com/JohnSmith/rails|https://github.com/JohnSmith/rails]]へ"orange"という名前のtopic branchでpushします。
<<<
$ git remote add JohnSmith git://github.com/JohnSmith/rails.git
$ git pull JohnSmith orange
>>>
これらのbranchの適用後、テストを行いましょう！以下に考慮すべきことを挙げます：

*変更は本当に働いていますか？
*テストによって何かいいことはありますか？彼らのテストをフォローできていますか？テストにミスはありませんか？
*適切なドキュメントを把握していますか？ドキュメントは他の場所で更新する必要がありますか？
*実行は好きですか？変更の実施のためによりよくて早い方法を考えられていますか？

一度でもpull requestが良い変更を含んで幸せになったら、あなたの賛同をGitHubのissueにコメントしましょう。
あなたのコメントは、あなたが変更することが好き、そして何が好きかを示すべきでしょう。

""私はあなたがgenerate_finder_sqlでそのコードを再構築した方法が好きだ。ー非常によく、良いテストに見える。

もしあなたのコメントが単純に"+1"と言えば、その後オッズは他のレビューがあまりにも真剣にそれを取るつもりはないということです。あなたがpull requestを確認するために時間がかかったことを示しています。

!6 Contributing to the Rails Documentation
Ruby on Railsは2つのメインドキュメントを持っています：the guides help you in learning about Ruby on Rails と API reference です。

あなたはRails guidesの発展を、一貫した文書であったり、矛盾しておらずた読めるものであったり、失敗の情報を加えたものであったり、エラーの修正法であったり、誤植の修正であったり、最新のRails endgeを発展させたりすることによって助けることができます。

Rails guidesの翻訳に参加するには、[[Trasslating Rails Guides|https://github.com/lifo/docrails/wiki/translating-rails-guides]]を参照してください。

もしあなたの変更について確信が持てているなら、[[docrails|https://github.com/lifo/docrails]]を通じて貴方自身で直接pushすることができます。
Docrailsはオープンコミットポリシーを持ち、誰でも記述するアクセス権を持っているブランチです。
Docrailsにコミットは今でも再調査されておりますが、しかしpushした後に再調査が起こるかもしれません。
Docrailsは定期的にmasterにmergeされているため、あなたは効果的にRuby on Rails documentationを編集できます。

もしドキュメントの変更に確信が持てないのなら、GitHub上の[[Rails|https://github.com/rails/rails/issues]]問題提起場に問題を作ることができます。

documentationに関して仕事するとき、[[API Documentation Guidelines|http://edgeguides.rubyonrails.org/api_documentation_guidelines.html]]と[[Ruby on Rails Guides Guidelines|http://edgeguides.rubyonrails.org/ruby_on_rails_guides_guidelines.html]]を参考にしてください。

""手早く説明すると、通常のコードのパッチは適切なdocumentationに適用されます。Docrailsは孤立したdocumentationの進歩のためだけに使用されます。


""私たちのCIサーバを助けるために、あなたは[ci skip]をあなたなdocumentationコミットメッセージにコミットの際にビルドをスキップする目的で加えることができます。documentationの変更にコミットが包括するためだけにそれを使うことを覚えておくようにお願いします。

""Docrailsは厳格なポリシーを持っています：コードの無いものはノータッチ、取るに足らない小さな変更は問わない。RDocとguidesはdocrailsを通してのみ編集ができます。また、CHANGELOGsはdocrailsないでは変更されません。

!7 Contributing to the Rails Code
!!7.1 Clone the Rails Repository
はじめにあなたが与えるべきコードは、リポジトリをクローンすることです：

<<<
$ git clone git://github.com/rails/rails.git
>>>
次に専用のbranchを作って下さい：
<<<
$ cd rails
$ git checkout -b my_new_branch
>>>
あなたがどんな名前をつけようと特に問題はありません。なぜならそのbranchはあなたのローカルコンピュータとGitHub上の個人のリポジトリでしかずっと存在しないからです。RailsのGitリポジトリの一部になることはありません。

!!7.2 Write Your Code
コードの編集と追加に忙しくなりましょう。
あなたがあなたのbranch上を使っている時、あなたが行いたいすべてのことが書き込めます。（git branch -aであなたが正しいbranchにいるか確認することができます）
しかしもしあなたがRailsで提出することを計画しているのなら、次のいくつかのことを気に留めておいて下さい：

*正しいコードを入手しましょう
*Railsのヘルパーとイディオムを使いましょう
*失敗するテストをコードに含みましょう。そしてそれをパスしましょう
*Update the (surrounding) documentation, examples elsewhere, and the guides: whatever is affected by your contribution.

push変更する前にテストコンポーネントをすべてRails内で実行することは習慣的ではない。特にrailtiesのテストは長い時間を要し、もしrails-dev-boxでの推奨されたワークフローで浮浪者にソースコードを書かれてしまうとそれ以上になってしまいます。

As a compromise, test what your code obviously affects, and if the change is not in railties run the whole test suite of the affected component.
もしすべてがグリーンなら、あなたの貢献は十分に提案出来ます。
どこかで予期しない破損をキャッチするために私たちは[[Travis CI|http://edgeguides.rubyonrails.org/https%0A://travis-ci.org/]]を持っています。

""安定性、機能性、Railsのテスト容易性に何も追加しない変更は、一般的に受け付けられません。

!!7.3 Follow the Coding Conventions
Railsはコーディングスタイルの簡単な規約をフォローしています：


*インデントはタブを使わず2スペース開けてください
*後続の空白は不要です。何もない行はスペースを持たせないでください
*private/protectedの後にはインデントを入れて下さい
*hashにはRuby 1.9以上のものを使用して下さい。{:a => :b}ではなく{ a: :b }を使用して下さい
*and/or より &&/|| を使用して下さい
*クラスメソッドには、self.methodより class << self を使用して下さい
*my_method( my_arg )またはmy_method my_argではなく MyClass.my_method(my_arg)を使用して下さい
*a=b ではなく a = b を使用して下さい
*refuteの代わりに assert_not メソッドを使用して下さい
*single-line blockのためには method{do_stuff} ではなく method { do_stuff } を使用して下さい
*あなたが以前見たことがあるソースに従ってください

上記がガイドラインです。
これらに習って良い判断を行なって下さい。

!!7.4 Updating the CHANGELOG
CHANGELOGは毎回のリリースの重要な部分になっています。
どのRailsのバージョンに対してもチェンジリストはキープされます。

あなたが追加または機能を削除している、またはバグ修正をコミットしている、または廃止の通知をしている場合は、変更したフレームワークののCHANGELOGにエントリを追加する必要があります。
リファクタリングとドキュメントの変更に関しては、一般的にCHANGELOGに行くべきではありません。

CHANGELOGを変更、出来れば終了した場合は著者の名前で締める必要があります。
より多くのスペースを必要とする場合、より多くの行を使うことができ、コードの例を付属させたいなら、4つのスペースでインデントしてください。
変更が特定の問題に関連している場合は、問題番号を添付すべきです。
以下にCHANGELOGエントリの例を示します：

<<<
*   Summary of a change that briefly describes what was changed. You can use multiple
    lines and wrap them at around 80 characters. Code examples are ok, too, if needed:
 
        class Foo
          def bar
            puts 'baz'
          end
        end
 
    You can continue after the code example and you can attach issue number. GH#1234
 
    *Your Name*
>>>    
あなたがコード例を提供していない、または複数の段落を用いなかった場合、あなたの名前は最後の単語の間に直接追加することができます。
そうでなければ、新しい段落に作るのが一番いいです。

!!7.5 Sanity Check
あなたはコードを提出剃る前に、それを見ているのが1人という状況を作ってはいけません。
あなたは少なくとも1人の正確なRails開発者を知っていますか？
あなたが行なっていることに対してフィードバックを得て下さい。
 Doing this in private before you push a patch out publicly is the “smoke test” for a patch:
公にパッチを公開する前に、プライベートに行なってしまうと、それはパッチのための"スモークテスト"になります：
もし美しいコードであることを他の1人の開発者に説得できない場合、コアチームに関してもまた説得することは起こりそうもありません。

!!7.6 Commit Your Changes
あなたのコンピュータに書いたコードがとてもよいものである場合は、Gitにコミットする必要があります：
<<<
$ git commit -a
>>>
この時点で、あなたのエディタは起動され、コミットメッセージを書くことが可能です。
変更が行われた理由、及びうまくフォーマットされたコミットメッセージを書くための時間をとって下さい。その理由は、他人のために有用であるからです。

良いコミットメッセージは以下のフォーマットに従っています：

<<<
Short summary (ideally 50 characters or less)
 
More detailed description, if necessary. It should be wrapped to 72
characters. Try to be as descriptive as you can, even if you think that
the commit content is obvious, it may not be obvious to others. You
should add such description also if it's already present in bug tracker,
it should not be necessary to visit a webpage to check the history.
 
Description can have multiple paragraphs and you can use code examples
inside, just indent it with 4 spaces:
 
    class PostsController
      def index
        respond_with Post.limit(10)
      end
    end
 
You can also add bullet points:
 
- you can use dashes or asterisks
 
- also, try to indent next line of a point for readability, if it's too
  long to fit in 72 characters
>>>
""適切な場合は単一のコミットを行なって下さい。これはチェリーピックを簡素化し、gitのログが綺麗に保つためです。

!!7.7 Update Your Branch

あなたが働いている間にmasterへの変更がある可能性はあります。
その整合性をとって下さい：
<<<
$ git checkout master
$ git pull --rebase
>>>
それでは最新の変更の上にあなたのパッチを適用してみます：
<<<
$ git checkout my_new_branch
$ git rebase master
>>>
競合は起きていませんか？またテストを渡しますか？変更はあなたにとって合理的ですか？それでは次の項目です。

!!7.8 Fork
Railsの[[GitHub repository|https://github.com/rails/rails]]に移動して、右上隅の"Fork"を押して下さい。

あなたのローカルマシンのリポジトリにリモートリポジトリを追加します：
<<<
$ git remote add mine git@github.com:<your user name>/rails.git
>>>
リモートリポジトリを追加してください：
<<<
$ git push mine my_new_branch
>>>
あなたは、あなたのマシンにfolkしたリポジトリをクローン化したかもしれない、その場合はリモート代わりに、オリジナルのRailsリポジトリを追加することをお勧めします。

クローンしたディレクトリにて：
<<<
$ git remote add rails git://github.com/rails/rails.git
>>>
公式のリポジトリからbranchと新しいコミットをダウンロード：
<<<
$ git fetch rails
>>>
新しいコンテンツをmerge:
<<<
$ git checkout master
$ git rebase rails/master
>>>
あなたのforkをアップデート：
<<<
$ git push origin master
>>>
もし他のbranchをアップデートしたいなら：
<<<
$ git checkout branch_name
$ git rebase rails/branch_name
$ git push origin branch_name
>>>
!!7.9 Issue a Pull Request
あなたが持っているプッシュされたRailsのリポジトリ（例えば：[[https://github.com/your-user-name/rails|https://github.com/your-user-name/rails]]）に移動し、右上隅にある"Pull Request"を押して下さい。

branchのフィールドにブランチ名（これはデフォルトでは"master"ばかりである）を書き、"Update Commit Range"を押して下さい。

あなたが導入した変更が"Commits"タブに格納されているか確認してください。
あなたの変更のすべてが"Files Changed"に含まれているか確認してください。

意味のあるタイトルを含んだ、あなたのパッチに関する詳細な情報を記述して下さい。
終わったら、"Send pull request"を押して下さい。
Railsのコアチームはあなたの提出物に通知します。

!!7.10 Get some Feedback
あなたが他の人のパッチを見てきたように、今度はあなたのパッチを誰かに見てもらわなければなりません。
あなたは[[Rubyonrails-core mailing list|https://groups.google.com/forum/?fromgroups#!forum/rubyonrails-core]]か#rails-contrib channel on IRCを使用することができます。
また、あなたが知っているRailsの開発者に話をしてみてもいいでしょう。

!!7.11 Iterate as Necessary

フィードバックを受けて変更することは可能です。
落胆しないでください：全体的な貢献となる活動的なオープンソースプロジェクトはコミュニティに知識として入り込みます。
人々があなたのコードを微調整することを奨励するということは、微調整したら再び送信する価値があるということです。
もしコアに属さないあなたのコードのフィードバックなら、gemとしてリリースすることを考えるかもしれません。

!!!7.11.1 Squashing commits

私たちはシングルコミットされるpull requestsを好みます。
これにより、簡単に安定したbranchにbackportできるようになり、squashingが簡単に悪いコミットを戻すことができるようになり、gitの履歴をフォローすることがほんの少しだけ簡単になります。
Railsは大きなプロジェクトであることと、複数の異質のコミットは、多くのノイズを加える事になります。

これを実行するために、あなたはメインのRailsリポジトリを指しているリモートを持っているようになる必要があります。
これはとにかく便利です。しかし念のため、あなたはこれをまだ設定せず、最初に行う次のことを確認してください：
<<<
$ git remote add upstream https://github.com/rails/rails.git
>>>
あなたが呼び出したいリモートはなんでも呼び出すことができます。しかし、upstreamを使用していない場合、以下の手順で名前を変更してください。

あなたのリモートブランチがmy_pull_requestに呼ばれることを考えると、以下が可能となります：

<<<
$ git fetch upstream
$ git checkout my_pull_request
$ git rebase upstream/master
$ git rebase -i
 
< Choose 'squash' for all of your commits except the first one. >
< Edit the commit message to make sense, and describe all your changes. >
 
$ git push origin my_pull_request -f
>>>

あなたは、GitHub上のpullリクエストを更新することができ、またそれが更新されていることを見ることができるでしょう。

!!7.12 Backporting
masterにマージされた変更は、Railsの次のメジャーリリースのために意図されています。
ときどきは、あなたの変更は古い安定したbranchのメンテナンスリリースに戻って伝播することが有益かもしれません。
一般的に、新機能とパッチが上手く振る舞いを行わない間の、セキュリティの修正とバグの修正はbackportの良い候補となります。
疑問がある場合、無駄な努力を避けるために、あなたの変更をbackportする前にRailsのチームメンバーに相談するのがベストです。

簡単な修正のために、あなたの変更を簡単にbackportする方法は、[[masterで変更から差分を抽出し、ターゲットbranchにてそれらを適用することhttp://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/]]です。

始めに、あなたの変更が現在のbranchとmasterとの違いであることを確認してください：
<<<
$ git log master..HEAD
>>>
差分の抽出：
<<<
$ git format-patch master --stdout > ~/my_changes.patch
>>>
ターゲットbranchに切り替えて、あなたの変更を適用：
<<<
$ git checkout -b my_backport_branch 3-2-stable
$ git apply ~/my_changes.patch
>>>
この作業は簡単な変更に適しています。
しかしながら、あなたの変更が複雑か、masterのコードがあなたのターゲットbranchから大きく逸脱してしまった場合、多くの作業を必要としてしまう場合があります。
backportの難しさは、ケースバイケースで大きく異なります、また時には単純に努力がそのまま価値になるわけではありません。

競合を解決し、全てのテストを通過していることを確認したら、あなたの変更をpushし、backport用に別のpull request をオープンしてください。
また、古いbranchがビルドターゲットとは違ったセットがある可能性も注目すべきことです。
可能であれば、あなたのpull requestの前に、最初にtravis.ymlに記載されているRubyのバージョンに対してローカルにbackportをテストしてください。

それでは… あなたの次の貢献は一体何でしょう！

!8 Rails Contributors
すべての貢献者はRails Contributorsのクレジットを得ます。
